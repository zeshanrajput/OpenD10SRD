{
  "hash": "1fd108f2eff263e3311dd0195c3843f2",
  "result": {
    "markdown": "# Gear\n\n## Melee Weapons\nA character using a melee weapon adds 1/5 of their Strength to damage rolls. Some weapons may allow a player to add 1/5 of their Agility instead.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# Build melee weapons table\n#| label: tbl-melee\n#| tbl-cap: Melee Weapons\n#| echo: false\n\nfrom sysdef import *\n\nmelee_data = pd.read_json('melee_weapons.json')\n\nmelee_table = melee_data.T\nmelee_table[\"Credit Cost\"] = round(melee_pricer(melee_table[\"dice\"],melee_table[\"pips\"]) * (1 - gear_discount) * credits_per_xp)\n\ndisplay(md(tabulate(melee_table,\n           headers=[\"Name\",\"Dice Damage\", \"Pips Damage\", \"Credits Cost\"])))\n```\n\n::: {.cell-output .cell-output-display}\nName             Dice Damage    Pips Damage    Credits Cost\n-------------  -------------  -------------  --------------\nDagger                     0              3            4909\nShort Sword                1              0            9000\nLong Sword                 1              2           12273\nBastard Sword              1              4           15545\nGreat Sword                2              0           18000\n:::\n:::\n\n\n## Ranged Weapons\nRanged weapons have difficulties associated with the ranges at which they can be used. In the following table:\n\n* 'PB' = Point Blank Range,\n* 'S' = Short Range,\n* 'M' = Moderate Range, and\n* 'L' = Long Range.\n\nMore information on range is presented in the Combat section.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Build ranged weapons table\n#| label: tbl-ranged\n#| tbl-cap: Ranged Weapons\n#| echo: false\n\n# Design Note: Ranged weapons are more difficult to use than melee ones. Targets\n# are farther: harder to see, small movements of the barrel mean missing by\n# meters, etc. From a game balance perspective PCs at range have the advantage\n# against enemies that can only use melee abilities. This is balanced in two\n# places. When items are defined, the ability to use them at range is balanced\n# at each range segment. Some weapons are easier to use up close (75 or 100),\n# others almost impossible (a 300). In the combat balance section we'll address\n# the XP cost of ranged abilities - this will cover the cinematic balance.\n\nranged_data = pd.read_json('ranged_weapons.json')\n\nranged_table = ranged_data.T\n\nranged_table[\"Credit Cost\"] = round(ranged_pricer(ranged_table[\"dice\"],\n                                                  ranged_table[\"pips\"],\n                                                  ranged_table[\"PB\"],\n                                                  ranged_table[\"S\"],\n                                                  ranged_table[\"M\"],\n                                                  ranged_table[\"L\"])* credits_per_xp * \n                                                  (1 - gear_discount))\n\ndisplay(md(tabulate(ranged_table,\n           headers=[\"Name\",\"Dice Damage\", \"Pips Damage\",\n                    \"PB\", \"S\", \"M\", \"L\", \"Credits Cost\"])))\n```\n\n::: {.cell-output .cell-output-display}\nName             Dice Damage    Pips Damage    PB    S    M    L    Credits Cost\n-------------  -------------  -------------  ----  ---  ---  ---  --------------\nThrown Dagger              0              3    75  125  300  300            5556\nPistol                     2              0   100   75  125  250           40669\nShotgun                    4              0    75  100  125  300           40641\nAssault Rifle              3              2   150  100  100  150           89391\nSniper Rifle               5              0   250  150  125  100          121331\n:::\n:::\n\n\n## Armor\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Build armor table\n#| label: tbl-armor\n#| tbl-cap: Armor\n#| echo: false\n\narmor_data = pd.read_json('armor.json')\n\narmor_table = armor_data.T\n\narmor_table[\"Credit Cost\"] = round(melee_pricer(0, armor_table[\"pips\"]) * \n    (1 - gear_discount) * credits_per_xp)\n\ndisplay(md(tabulate(armor_table,\n           headers=[\"Name\", \"Armor Value\", \"Credits Cost\"])))\n```\n\n::: {.cell-output .cell-output-display}\nName                     Armor Value    Credits Cost\n---------------------  -------------  --------------\nBlast Vest                         5            8182\nBlast Helmet                       2            3273\nCombat Jumpsuit                    4            6545\nPowered Assault Armor             15           24545\nArmored Business Suit              3            4909\n:::\n:::\n\n\n## Other Gear\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ndisplay(md(f\"For items that replicate a feature or ability, multiply the XP cost by {credits_per_xp * (1 - gear_discount)}.\"))\n```\n\n::: {.cell-output .cell-output-display}\nFor items that replicate a feature or ability, multiply the XP cost by 900.0.\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndisplay(md(f\"For all other gear multiply the real world cost in US Dollars by {credits_per_xp / 10}.\"))\n```\n\n::: {.cell-output .cell-output-display}\nFor all other gear multiply the real world cost in US Dollars by 100.0.\n:::\n:::\n\n\n",
    "supporting": [
      "ch11_files\\figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}